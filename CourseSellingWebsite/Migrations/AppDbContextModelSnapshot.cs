// <auto-generated />
using System;
using CourseSellingWebsite.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CourseSellingWebsite.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseSellingWebsite.Models.Admin", b =>
                {
                    b.Property<string>("AdminId")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("AdminID");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AdminId")
                        .HasName("PK__Admin__719FE4E8C823D499");

                    b.HasIndex(new[] { "Email" }, "UQ__Admin__A9D10534FADE1E2B")
                        .IsUnique();

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentId")
                        .HasColumnType("varchar(450)");

                    b.Property<string>("TeacherId")
                        .HasColumnType("varchar(450)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.Cart", b =>
                {
                    b.Property<string>("CartId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CartID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("StudentID");

                    b.HasKey("CartId")
                        .HasName("PK__Cart__51BCD797E954E92B");

                    b.HasIndex("StudentId");

                    b.ToTable("Cart", null, t =>
                        {
                            t.HasTrigger("trg_Cart_InsteadOfInsert");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.CartDetail", b =>
                {
                    b.Property<string>("CartId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CartID");

                    b.Property<string>("CourseId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CourseID");

                    b.HasKey("CartId", "CourseId")
                        .HasName("PK__CartDeta__3D2E008FEF1E2C01");

                    b.HasIndex("CourseId");

                    b.ToTable("CartDetail", (string)null);
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.Course", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CourseID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int>("DurationDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(150);

                    b.Property<int>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("GradeID");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("TeacherID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CourseId")
                        .HasName("PK__Course__C92D7187A149D585");

                    b.HasIndex("GradeId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Course", null, t =>
                        {
                            t.HasTrigger("trg_Course_InsteadOfInsert");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.CourseGoal", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CourseID");

                    b.Property<int>("GoalOrder")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("CourseId", "GoalOrder")
                        .HasName("PK__CourseGo__8031A6B67FD923F1");

                    b.ToTable("CourseGoal", (string)null);
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.CourseProgress", b =>
                {
                    b.Property<string>("StudentId")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("StudentID");

                    b.Property<string>("LessonId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("LessonID");

                    b.Property<DateTime>("CompleteddAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("Progress")
                        .HasColumnType("tinyint");

                    b.HasKey("StudentId", "LessonId")
                        .HasName("PK__CoursePr__29CD60B296375075");

                    b.HasIndex("LessonId");

                    b.ToTable("CourseProgress", (string)null);
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.CourseRatingStat", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CourseID");

                    b.Property<decimal?>("RatingAvg")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<int?>("RatingCount")
                        .HasColumnType("int");

                    b.HasKey("CourseId")
                        .HasName("PK__CourseRa__C92D7187EF4AF8EB");

                    b.ToTable("CourseRatingStats");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.CourseRequirement", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CourseID");

                    b.Property<int>("RequirementOrder")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("CourseId", "RequirementOrder")
                        .HasName("PK__CourseRe__7D70E0DCBB64C459");

                    b.ToTable("CourseRequirement", (string)null);
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.CourseReview", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CourseID");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("StudentID");

                    b.HasKey("ReviewId")
                        .HasName("PK__CourseRe__74BC79AE54654468");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseReview", null, t =>
                        {
                            t.HasTrigger("trg_AfterInsertUpdate_CourseReview");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.CourseStudent", b =>
                {
                    b.Property<string>("CourseId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CourseID");

                    b.Property<string>("StudentId")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("StudentID");

                    b.Property<DateTime>("EnrolledAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CourseId", "StudentId")
                        .HasName("PK__CourseSt__4A01232041B8BE7B");

                    b.HasIndex("StudentId");

                    b.ToTable("CourseStudent", (string)null);
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.GradeLevel", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GradeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("GradeId")
                        .HasName("PK__GradeLev__54F87A37D7E892AF");

                    b.HasIndex(new[] { "Name" }, "UQ__GradeLev__737584F6B2508E61")
                        .IsUnique();

                    b.ToTable("GradeLevel", (string)null);
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.Lesson", b =>
                {
                    b.Property<string>("LessonId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("LessonID");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CourseID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LessonOrder")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("LessonId")
                        .HasName("PK__Lesson__B084ACB05A55EE20");

                    b.HasIndex("CourseId");

                    b.ToTable("Lesson", null, t =>
                        {
                            t.HasTrigger("TR_DeleteLesson_CascadeCourseProgress");

                            t.HasTrigger("trg_Lesson_InsteadOfInsert");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.LessonComment", b =>
                {
                    b.Property<string>("CommentId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CommentID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LessonId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("LessonID");

                    b.Property<string>("ParentId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ParentID");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PersonID");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("CommentId")
                        .HasName("PK__LessonCo__C3B4DFAABC100AD1");

                    b.HasIndex("LessonId");

                    b.HasIndex("ParentId");

                    b.ToTable("LessonComment", null, t =>
                        {
                            t.HasTrigger("trg_LessonComment_InsteadOfInsert");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.Notification", b =>
                {
                    b.Property<string>("StudentId")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("StudentID");

                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotificationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("StudentId", "NotificationId")
                        .HasName("PK__Notifica__00C9D89A8B65898F");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.OrderHistory", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("OrderID");

                    b.Property<string>("CartId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("CartID");

                    b.Property<string>("CourseId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("CourseID");

                    b.Property<DateTime?>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("OrderId")
                        .HasName("PK__OrderHis__C3905BAFC2A89AE8");

                    b.HasIndex("CartId", "CourseId");

                    b.ToTable("OrderHistory", null, t =>
                        {
                            t.HasTrigger("trg_OrderHistory_InsteadOfInsert");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("StudentID");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("GradeID");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("RegisteredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("StudentId")
                        .HasName("PK__Student__32C52A79853677EE");

                    b.HasIndex("GradeId");

                    b.HasIndex(new[] { "Email" }, "UQ__Student__A9D1053418B26D87")
                        .IsUnique();

                    b.ToTable("Student", null, t =>
                        {
                            t.HasTrigger("trg_Student_InsteadOfInsert");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.Subject", b =>
                {
                    b.Property<string>("SubjectId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("SubjectID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("SubjectId")
                        .HasName("PK__Subject__AC1BA388DC48C962");

                    b.HasIndex(new[] { "Name" }, "UQ__Subject__737584F633484795")
                        .IsUnique();

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.Teacher", b =>
                {
                    b.Property<string>("TeacherId")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)")
                        .HasColumnName("TeacherID");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("TeachingSubjectId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("TeachingSubjectID");

                    b.HasKey("TeacherId")
                        .HasName("PK__Teacher__EDF25944E1FCA7A8");

                    b.HasIndex("TeachingSubjectId");

                    b.HasIndex(new[] { "Email" }, "UQ__Teacher__A9D10534C458590B")
                        .IsUnique();

                    b.ToTable("Teacher", null, t =>
                        {
                            t.HasTrigger("trg_Teacher_InsteadOfInsert");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.ViewPerson", b =>
                {
                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PersonID");

                    b.Property<string>("PersonType")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)");

                    b.ToTable((string)null);

                    b.ToView("View_Person", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.AppUser", b =>
                {
                    b.HasOne("CourseSellingWebsite.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CourseSellingWebsite.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.Cart", b =>
                {
                    b.HasOne("CourseSellingWebsite.Models.Student", "Student")
                        .WithMany("Carts")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Cart__StudentID__628FA481");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.CartDetail", b =>
                {
                    b.HasOne("CourseSellingWebsite.Models.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CartDetai__CartI__656C112C");

                    b.HasOne("CourseSellingWebsite.Models.Course", "Course")
                        .WithMany("CartDetails")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__CartDetai__Cours__66603565");

                    b.Navigation("Cart");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.Course", b =>
                {
                    b.HasOne("CourseSellingWebsite.Models.GradeLevel", "Grade")
                        .WithMany("Courses")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Course__GradeID__45F365D3");

                    b.HasOne("CourseSellingWebsite.Models.Teacher", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Course__TeacherI__44FF419A");

                    b.Navigation("Grade");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.CourseGoal", b =>
                {
                    b.HasOne("CourseSellingWebsite.Models.Course", "Course")
                        .WithMany("CourseGoals")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CourseGoa__Cours__48CFD27E");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.CourseProgress", b =>
                {
                    b.HasOne("CourseSellingWebsite.Models.Lesson", "Lesson")
                        .WithMany("CourseProgresses")
                        .HasForeignKey("LessonId")
                        .IsRequired()
                        .HasConstraintName("FK__CoursePro__Lesso__5EBF139D");

                    b.HasOne("CourseSellingWebsite.Models.Student", "Student")
                        .WithMany("CourseProgresses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CoursePro__Stude__5DCAEF64");

                    b.Navigation("Lesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.CourseRequirement", b =>
                {
                    b.HasOne("CourseSellingWebsite.Models.Course", "Course")
                        .WithMany("CourseRequirements")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CourseReq__Cours__4BAC3F29");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.CourseReview", b =>
                {
                    b.HasOne("CourseSellingWebsite.Models.Course", "Course")
                        .WithMany("CourseReviews")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__CourseRev__Cours__7B5B524B");

                    b.HasOne("CourseSellingWebsite.Models.Student", "Student")
                        .WithMany("CourseReviews")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__CourseRev__Stude__7A672E12");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.CourseStudent", b =>
                {
                    b.HasOne("CourseSellingWebsite.Models.Course", "Course")
                        .WithMany("CourseStudents")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK__CourseStu__Cours__6E01572D");

                    b.HasOne("CourseSellingWebsite.Models.Student", "Student")
                        .WithMany("CourseStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__CourseStu__Stude__6EF57B66");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.Lesson", b =>
                {
                    b.HasOne("CourseSellingWebsite.Models.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Lesson__CourseID__4F7CD00D");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.LessonComment", b =>
                {
                    b.HasOne("CourseSellingWebsite.Models.Lesson", "Lesson")
                        .WithMany("LessonComments")
                        .HasForeignKey("LessonId")
                        .IsRequired()
                        .HasConstraintName("FK__LessonCom__Lesso__74AE54BC");

                    b.HasOne("CourseSellingWebsite.Models.LessonComment", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK__LessonCom__Paren__75A278F5");

                    b.Navigation("Lesson");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.Notification", b =>
                {
                    b.HasOne("CourseSellingWebsite.Models.Student", "Student")
                        .WithMany("Notifications")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__Stude__59063A47");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.OrderHistory", b =>
                {
                    b.HasOne("CourseSellingWebsite.Models.CartDetail", "CartDetail")
                        .WithMany("OrderHistories")
                        .HasForeignKey("CartId", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__OrderHistory__6A30C649");

                    b.Navigation("CartDetail");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.Student", b =>
                {
                    b.HasOne("CourseSellingWebsite.Models.GradeLevel", "Grade")
                        .WithMany("Students")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Student__GradeID__5441852A");

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.Teacher", b =>
                {
                    b.HasOne("CourseSellingWebsite.Models.Subject", "TeachingSubject")
                        .WithMany("Teachers")
                        .HasForeignKey("TeachingSubjectId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Teacher_Subject");

                    b.Navigation("TeachingSubject");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CourseSellingWebsite.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CourseSellingWebsite.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourseSellingWebsite.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CourseSellingWebsite.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.CartDetail", b =>
                {
                    b.Navigation("OrderHistories");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.Course", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("CourseGoals");

                    b.Navigation("CourseRequirements");

                    b.Navigation("CourseReviews");

                    b.Navigation("CourseStudents");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.GradeLevel", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.Lesson", b =>
                {
                    b.Navigation("CourseProgresses");

                    b.Navigation("LessonComments");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.LessonComment", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.Student", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("CourseProgresses");

                    b.Navigation("CourseReviews");

                    b.Navigation("CourseStudents");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.Subject", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("CourseSellingWebsite.Models.Teacher", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
